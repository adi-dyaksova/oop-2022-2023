#include <iostream>

/*
    Първият ни примерен клас. Дефинирането на клас става по същия начин
    като дефиниринето на структура, защото те са почти аналогични.
    Единствената разлика е, че добавяме ключовата дума public, защото
    по подразбиране всичко в класа е private. Повече за това на някое от следващите упражнения.
*/
class Number
{
public:
    // Член данна на класа
    int x;

    // Конструктор - по-специална функция, която се ползва само при създаване на обект от този клас.
    // Можем да напишем произволен код в тялото й, но целта е да инициализираме началното състояние на обекта.
    // Това тук е конструкторът по подразбиране(такъв, който не приема аргументи).
    Number()
    {
        // Ключова дума this е указател към текущия обект. Т.е. би изглеждало като Number *this, ако
        // трябваше да е дефинирано някъде в кода ни. Синтаксисът this->x е аналогичен на (*this).x,
        // но е една идея по-чист и ще ползваме него.
        this->x = 0; // В конструктора по подразбиране задаваме някакво базово инициализиране на нашия обект
    }

    // Конструктор с един параметър
    Number(int n)
    {
        // Подаваме число, с което да инициализираме началното състояние на нашия обект.
        this->x = n;
    }

    // Член фунцкия/метод, която отпечатва състоянието на обекта
    void print()
    {
        std::cout << x;
    }

    // Предефинираме как работи оператор + за обекти от тип Number. Можем да правим същото с всеки друг оператор
    // в езика и всеки друг тип или комбинация от типове. Имплементацията е такава, каквато решим.
    Number operator+(Number other)
    {
        // Нашата имплементация ще връща нова инстанция на класа Number
        return Number(x + other.x);
    }
};

int main()
{
    int a = 3;
    int b = 4;

    // Използване на оператор + върху int
    int c = a + b;

    // Конструиране на няколко обекта от нашият клас
    Number n1(4), n2(5), n3;

    // Използване на оператор + върху Number
    n3 = n1 + n2;

    // Стандартно извикване на член функция
    n3.print();
    return 0;
}