#include <iostream>
#include <functional>

// Стандартна функция
int f(int y)
{
    return y + 5;
}

// Клас с предефиниран оператор ().
// Обекти от този клас ще можем да "извикваме" като функции, а всъщност просто ще има прилагаме оператор ()
// и това, което ще бъде извиквано е тялото на функцията operator().
class A
{
public:
    int operator()(int y)
    {
        return y + 10;
    }
};

int main()
{
    A aObject;

    // std::function е шаблонен клас в стандартната библиотека, който
    // може да се инициализира от всеки извикваем обект(всяко нещо, на което можем да изпозлваме оператор ()).
    // Целта на този клас е да предостави възможно най-общата абстракция и да предостави възможно най-много преизползваемост.
    std::function<int(int)> g = f;        // инициализиране от стандартна функция
    std::function<int(int)> g1 = aObject; // инцициализиране от обект, на който може да се извиква оператор ()

    /*
        Ламбда израз - позволява ни да създадем функция(извикваем обект) без име.
        Също като стандартните функции, имаме списък с параметри, тип на резултата и тяло на функцията, но нямаме име на функцията.

        Ламбда изразите са "синтактична захар". Всъщност компилаторът ги преобразува до нещо от вида

        struct anonymous
        {
            int operator()(int y)
            {
                return y + 5;
            }
        }
    */
    std::function<int(int)> g2 = [](int y) -> int { return y + 5; }; // инициализиране от ламбда израз

    // Единственото, което можем да правим с обекти от тип std::function е да ги извикваме(да им извикваме оператор ()).
    std::cout << g(10) << std::endl;
    std::cout << g1(3) << std::endl;
    std::cout << g1(12) << std::endl;

    return 0;
}